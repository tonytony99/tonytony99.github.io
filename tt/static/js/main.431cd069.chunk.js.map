{"version":3,"sources":["Header.js","tiptoe.png","Util.js","Game/Home.js","Game/Lobby.js","Timer.js","Game/DescribePrompt.js","Game/DescribePost.js","Game/DescribeHold.js","Game/Describe.js","Game/GuessPromptOther.js","Game/GuessPromptOwn.js","Game/GuessPrompt.js","Game/ScoreTable.js","Game/GuessPost.js","Game/GuessHold.js","Game/Guess.js","Game/Final.js","Game/Disconnected.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","style","text","sanitize","input","maxLength","JSON","stringify","split","filter","v","includes","join","extractAllowedCharacters","slice","Home","joinName","setJoinName","joinCode","setJoinCode","createName","setCreateName","createRounds","setCreateRounds","joinGame","createGame","joinError","createError","className","src","tiptoe","alt","htmlFor","name","type","value","onChange","e","target","placeholder","onClick","Lobby","game","player","beginGame","error","id","isHost","players","map","p","i","Timer","totalTimerDuration","Math","round","endTime","startTime","remainingTimerDuration","Date","now","state","time","seconds","timer","startTimer","bind","countDown","this","clearInterval","setInterval","setState","proportion","angle","PI","path","cos","sin","height","width","fill","cx","cy","r","d","ceil","React","Component","DescribePrompt","description","updateDescription","addDescription","prompt","cat","word","onSubmit","preventDefault","latestTimeoutEnd","latestTimeoutStart","DescribePost","DescribeHold","renderSwitch","subState","Describe","setDescription","newValue","allowedDescription","letter","toLowerCase","GuessPromptOther","guess","updateGuess","addGuess","catToGuess","descriptionToGuess","GuessPromptOwn","GuessPrompt","descriptionIndex","index","ScoreTable","isFinal","justDescribed","sort","p1","p2","score","max","wordToGuess","GuessPost","GuessHold","Guess","setGuess","Final","resetGame","Disconnected","addDescriptionError","addGuessError","beginGameError","resetGameError","Game","useState","setCreateError","setJoinError","setAddDescriptionError","setAddGuessError","setGame","setPlayer","setBeginGameError","setResetGameError","ws","setWs","isConnected","setIsConnected","useEffect","newWs","WebSocket","addEventListener","data","length","console","log","response","parse","newPlayer","isValidPlayer","parseInt","newGame","isValidGame","Array","isArray","gamePlayer","newGamePlayer","push","onclose","descriptionToSend","requestObject","action","playerId","gameId","readyState","OPEN","send","guessToSend","code","playerName","rounds","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.431cd069.chunk.js","sourcesContent":["\r\nfunction Header(props) {\r\n    return (\r\n        <div style={{ 'marginTop': 0, 'width': '100%', 'backgroundColor': '#111' }}>\r\n            <h1 style={{ 'margin': 0, 'padding': '10px' }}>{props.text}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/tiptoe.3aa316e0.png\";","const allowedCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ';\r\n\r\nfunction extractAllowedCharacters(input) {\r\n    return JSON.stringify(input).split('').filter(v => allowedCharacters.includes(v)).join('');\r\n}\r\n\r\nfunction sanitize(input, maxLength) {\r\n    return (input === null ? null : extractAllowedCharacters(input).slice(0, maxLength))\r\n}\r\n\r\nexport {sanitize}\r\n","import tiptoe from '../tiptoe.png';\r\nimport { sanitize } from '../Util';\r\n\r\nfunction Home({ joinName, setJoinName, joinCode, setJoinCode,\r\n    createName, setCreateName, createRounds, setCreateRounds, joinGame, createGame, joinError, createError }) {\r\n    return (\r\n        <div className='centralCol'>\r\n            <img src={tiptoe} alt=\"logo\" style={{ 'width': '25vh', 'marginTop': '5vh' }} />\r\n            <div style={{ 'marginTop': '5vh' }}>\r\n                <div className='homeInputCol' style={{ 'borderRight': 'solid 2px grey' }}>\r\n                    <h3 style={{ 'textAlign': 'left' }}>Join Game</h3>\r\n                    <div className='labelledInputContainer'>\r\n                        <div className='labelledInputLabelContainer'>\r\n                            <label htmlFor='joinName' >Name</label>\r\n                        </div>\r\n                        <input\r\n                            className='labelledInputInput'\r\n                            name='joinName'\r\n                            type='text'\r\n                            value={joinName}\r\n                            onChange={e => setJoinName(sanitize(e.target.value, 16))}\r\n                            placeholder='Name'\r\n                        />\r\n                    </div>\r\n                    <div className='labelledInputContainer'>\r\n                        <div className='labelledInputLabelContainer'>\r\n                            <label htmlFor='joinCode' >Code</label>\r\n                        </div>\r\n                        <input\r\n                            className='labelledInputInput'\r\n                            name='joinCode'\r\n                            type='text'\r\n                            value={joinCode}\r\n                            onChange={e => setJoinCode(sanitize(e.target.value, 6))}\r\n                            placeholder='Code'\r\n                        />\r\n                    </div>\r\n                    <div className='labelledInputContainer'>\r\n                        <input onClick={e => joinGame()} type='button' value='Join' />\r\n                    </div>\r\n                </div>\r\n                <div className='homeInputCol'>\r\n                    <h3 style={{ 'textAlign': 'left' }}>Create Game</h3>\r\n                    <div className='labelledInputContainer'>\r\n                        <div className='labelledInputLabelContainer'>\r\n                            <label htmlFor='createName' >Name</label>\r\n                        </div>\r\n                        <input\r\n                            className='labelledInputInput'\r\n                            name='createName'\r\n                            type='text'\r\n                            value={createName}\r\n                            onChange={e => setCreateName(sanitize(e.target.value, 16))}\r\n                            placeholder='Name'\r\n                        />\r\n                    </div>\r\n                    <div className='labelledInputContainer'>\r\n                        <div className='labelledInputLabelContainer'>\r\n                            <label htmlFor='createRounds' >Rounds</label>\r\n                        </div>\r\n                        <select value={createRounds} onChange={e => setCreateRounds(e.target.value)} name='createRounds'>\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"3\">3</option>\r\n                            <option value=\"5\">5</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className='labelledInputContainer'>\r\n                        <input onClick={e => createGame()} type='button' value='Create' />\r\n                    </div>\r\n                </div>\r\n                <div style={{ 'display': 'block', 'height': '4em' }}>\r\n                    <div className='homeInputCol' style={{ 'borderRight': 'solid 2px rgba(0,0,0,0)' }}>\r\n                        <div className='error' style={{'display': 'inline-block', 'verticalAlign': 'top', 'marginTop': '10px', 'visibility': (joinError === '' ? 'hidden' : 'visible') }}>\r\n                            Error: {joinError}\r\n                        </div>\r\n                    </div>\r\n                    <div className='homeInputCol'>\r\n                        <div className='error' style={{ 'display': 'inline-block', 'verticalAlign': 'top', 'marginTop': '10px', 'visibility': (createError === '' ? 'hidden' : 'visible') }}>\r\n                            Error: {createError}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","\r\nfunction Lobby({ game, player, beginGame, error }) {\r\n    return (\r\n        <div className='centralCol' style={{ 'textAlign': 'left', 'paddingLeft': '10px' }}>\r\n            <h1 style={{ 'textAlign': 'left', 'marginTop': '3vh' }}>Lobby</h1>\r\n            <p>Invite players using the code: <span style={{ 'fontWeight': 'bold' }}>{game.id}</span></p>\r\n\r\n            {((player !== null) && ('isHost' in player)) ?\r\n                ((player.isHost) ?\r\n                    <div>\r\n                        <input type='button' onClick={e => beginGame()} value='Start Game' />\r\n                        <div style={{ 'height': '1em' }}>\r\n                            <p className='error'>{error}</p>\r\n                        </div>\r\n                        <p>You are the host, only you can start the game</p>\r\n                    </div>\r\n                    : <p>Waiting for the host to start the game</p>)\r\n                : <div></div>}\r\n\r\n\r\n            <h2 style={{ 'textAlign': 'left', 'marginTop': '3vh' }}>Players</h2>\r\n\r\n            {('players' in game) ? game.players.map((p, i) => {\r\n                return (\r\n                    <p key={i} style={{ 'margin': '10px 0', 'fontSize': 'large', 'fontWeight': 'bold' }}>- {p.name}</p>\r\n                )\r\n            }) : <div></div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lobby;\r\n","import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        const totalTimerDuration = Math.round((props.endTime - props.startTime) / 1000)\r\n        const remainingTimerDuration = Math.round((props.endTime - Date.now()) / 1000);\r\n        this.state = { time: {}, seconds: remainingTimerDuration, totalTimerDuration: totalTimerDuration };\r\n        this.timer = 0;\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.countDown = this.countDown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startTimer();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    startTimer() {\r\n        if (this.timer === 0 && this.state.seconds > 0) {\r\n            this.timer = setInterval(this.countDown, 100);\r\n        }\r\n    }\r\n\r\n    countDown() {\r\n        // Remove one second, set state so a re-render happens.\r\n        let seconds = this.state.seconds - .1;\r\n        this.setState({\r\n            seconds: seconds,\r\n        });\r\n\r\n        // Check if we're at zero.\r\n        if (seconds <= 0) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const proportion = (this.state.totalTimerDuration - this.state.seconds) / this.state.totalTimerDuration;\r\n        const angle = (2 * Math.PI * proportion) - Math.PI / 2;\r\n\r\n        let path = 'M 50 50 L 50 0 L 100 0 ';\r\n        if (proportion > .25) {\r\n            path += 'L 100 100 ';\r\n        }\r\n        if (proportion > .5) {\r\n            path += 'L 0 100 ';\r\n        }\r\n        if (proportion > .75) {\r\n            path += 'L 0 0 ';\r\n        }\r\n        path += ' L ' + (50 + 50 * Math.cos(angle)) + ' ' + (50 + 50 * Math.sin(angle)) + ' ';\r\n        path += ' L 50 50';\r\n\r\n        return (\r\n            <div style={{ 'display': 'inline-block', 'height': '100px', 'width': '100px' }}>\r\n                <svg height='100px' width='100px'>\r\n                    <rect width='100' height='100' fill='#222' />\r\n                    <circle cx='50' cy='50' r='50' fill={'#' + (10 + Math.round(proportion * 89)) + '' + (10 + Math.round((1-proportion) * 89)) + '11'} />\r\n                    <path d={path} fill='#222' />\r\n                </svg>\r\n                <p style={{ 'position': 'relative', 'fontWeight': 'bold', 'top': '-100px', 'textAlign': 'center', 'fontSize': '60px', 'margin': 0 }}>\r\n                    {Math.ceil(this.state.seconds)}\r\n                </p>\r\n\r\n                <p style={{ 'position': 'relative', 'fontWeight': 'bold', 'top': '-115px', 'textAlign': 'center', 'fontSize': '16px', 'margin': 0 }}>\r\n                    seconds\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;\r\n","import Timer from '../Timer';\r\n\r\nfunction DescribePrompt({ game, player, error, description, updateDescription, addDescription }) {\r\n\r\n    return (\r\n        <div>\r\n            <p style={{ 'fontSize': '1.5em' }}>\r\n                Describe this {player.prompt.cat}: <br />\r\n                <span style={{ 'fontSize': '2em', 'fontWeight': 'bold' }}>\r\n                    {player.prompt.word}\r\n                </span>\r\n            </p>\r\n            <form onSubmit={e => { e.preventDefault(); addDescription() }}>\r\n                <div className='labelledInputContainer' style={{ 'display': 'inline-block' }}>\r\n                    <div className='labelledInputLabelContainer'>\r\n                        <label htmlFor='addDescription' >Your Description</label>\r\n                    </div>\r\n                    <input className={'labelledInputInput'} name='addDescription' type='text' value={description} onChange={e => updateDescription(e.target.value)} />\r\n                </div>\r\n                <div className='labelledInputContainer' style={{ 'display': 'inline-block', 'marginLeft': '10px' }}>\r\n                    <input type='submit' value='Send' />\r\n                </div>\r\n            </form>\r\n            <div style={{ 'height': '1em' }}>\r\n                <p className='error'>{error}</p>\r\n            </div>\r\n            <div style={{ 'textAlign': 'center', 'marginTop': '2vh', 'height': '100px' }}>\r\n                <Timer endTime={game.latestTimeoutEnd} startTime={game.latestTimeoutStart}></Timer>\r\n            </div>\r\n            <div style={{ 'marginTop': '2vh', 'backgroundColor': '#111', 'padding': '5px 10px', 'borderRadius': '5px' }}>\r\n                <h3 style={{ 'margin': 0 }}>Remember</h3>\r\n                <ul style={{ 'paddingLeft': '15px' }}>\r\n                    <li style={{ 'padding': 0 }}>Use 1 to 16 characters</li>\r\n                    <li style={{ 'padding': 0 }}>Do not use letters in the word <span style={{ 'fontWeight': 'bold' }}>{player.prompt.word}</span></li>\r\n                    <li style={{ 'padding': 0 }}>Guessers will be told the category</li>\r\n                </ul>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DescribePrompt;\r\n","function DescribePost({ game, player, error }) {\r\n\r\n    return (\r\n        <div style={{'textAlign': 'center'}}>\r\n            <h1 style={{'fontSize': '3em', 'marginTop': '20vh'}}>Describing is over</h1>\r\n            <p>\r\n                It's time for guessing!\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DescribePost;","import Timer from '../Timer';\r\n\r\nfunction DescribeHold({ game, player, error }) {\r\n\r\n    return (\r\n        <div style={{ 'textAlign': 'center' }}>\r\n            <h1 style={{ 'fontSize': '3em', 'marginTop': '20vh' }}>Waiting for others</h1>\r\n            <p>\r\n                Your description of {player.prompt.word} was {player.description}\r\n            </p>\r\n\r\n            <div style={{ 'textAlign': 'center', 'marginTop': '5vh' }}>\r\n                <Timer endTime={game.latestTimeoutEnd} startTime={game.latestTimeoutStart}></Timer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DescribeHold;\r\n","import DescribePrompt from './DescribePrompt';\r\nimport DescribePost from './DescribePost';\r\nimport DescribeHold from './DescribeHold';\r\nimport { sanitize } from '../Util';\r\n\r\nfunction renderSwitch(subState, game, player, error, description, updateDescription, addDescription) {\r\n    switch (subState) {\r\n        case 'prompt':\r\n            return <DescribePrompt game={game} player={player} error={error} description={description} updateDescription={updateDescription} addDescription={addDescription} />\r\n        case 'hold':\r\n            return <DescribeHold game={game} player={player} error={error} />\r\n        case 'post':\r\n            return <DescribePost game={game} player={player} error={error} />\r\n        default:\r\n            return <div></div>\r\n    }\r\n}\r\n\r\nfunction Describe({ game, player, error, description, setDescription, addDescription }) {\r\n    function updateDescription(newValue) {\r\n        const allowedDescription = newValue.split('').filter(letter => !player.prompt.word.toLowerCase().includes(letter.toLowerCase())).join('');\r\n        setDescription(sanitize(allowedDescription, 16));\r\n    }\r\n    return (\r\n        <div className='centralCol' style={{ 'textAlign': 'left' }}>\r\n            {renderSwitch(game.subState, game, player, error, description, updateDescription, addDescription)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Describe;\r\n","import Timer from '../Timer';\r\n\r\nfunction GuessPromptOther({ game, player, error, guess, updateGuess, addGuess }) {\r\n\r\n    return (\r\n        <div>\r\n            <p style={{ 'fontSize': '1.5em' }}>\r\n                Guess this {game.catToGuess}: <br />\r\n                <span style={{ 'fontSize': '2em', 'fontWeight': 'bold' }}>\r\n                    {game.descriptionToGuess}\r\n                </span>\r\n            </p>\r\n            <form onSubmit = {e => {e.preventDefault(); addGuess()}}>\r\n                <div className='labelledInputContainer' style={{ 'display': 'inline-block' }}>\r\n                    <div className='labelledInputLabelContainer'>\r\n                        <label htmlFor='addGuess' >Your Guess</label>\r\n                    </div>\r\n                    <input className={'labelledInputInput'} name='addGuess' type='text' value={guess} onChange={(e) => updateGuess(e.target.value)} />\r\n                </div>\r\n                <div className='labelledInputContainer' style={{ 'display': 'inline-block', 'marginLeft': '10px' }}>\r\n                    <input type='submit' value='Send' />\r\n                </div>\r\n            </form>\r\n            <div style={{ 'height': '1em' }}>\r\n                <p className='error'>{error}</p>\r\n            </div>\r\n            <div style={{ 'textAlign': 'center', 'marginTop': '2vh', 'height': '100px' }}>\r\n                <Timer endTime={game.latestTimeoutEnd} startTime={game.latestTimeoutStart}></Timer>\r\n            </div>\r\n            <div style={{ 'marginTop': '2vh', 'backgroundColor': '#111', 'padding': '5px 10px', 'borderRadius': '5px' }}>\r\n                <h3 style={{ 'margin': 0 }}>Remember</h3>\r\n                <p>\r\n                    The word has none of the letters in\r\n                    <span style={{ 'fontWeight': 'bold' }}> {game.descriptionToGuess} </span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuessPromptOther;\r\n","import Timer from '../Timer';\r\n\r\nfunction GuessPromptOwn({ game, player, error }) {\r\n\r\n    return (\r\n        <div style={{ 'textAlign': 'center' }}>\r\n            <h1 style={{ 'fontSize': '2em', 'marginTop': '20vh' }}>Players are guessing your description</h1>\r\n            <p>\r\n                (You described {player.prompt.word} as {player.description})\r\n            </p>\r\n\r\n            <div style={{ 'textAlign': 'center', 'marginTop': '5vh' }}>\r\n                <Timer endTime={game.latestTimeoutEnd} startTime={game.latestTimeoutStart}></Timer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuessPromptOwn;\r\n","import GuessPromptOther from './GuessPromptOther';\r\nimport GuessPromptOwn from './GuessPromptOwn';\r\n\r\nfunction GuessPrompt({ game, player, error, guess, updateGuess, addGuess }) {\r\n\r\n    return (\r\n        game.descriptionIndex === player.index ?\r\n        <GuessPromptOwn game={game} player={player} error={error}/>\r\n        :\r\n        <GuessPromptOther game={game} player={player} addGuess={addGuess} error={error} guess={guess} updateGuess={updateGuess}/>\r\n    );\r\n}\r\n\r\nexport default GuessPrompt;\r\n","import { React } from 'react';\r\n\r\nfunction ScoreTable({ game, isFinal = false }) {\r\n    const players = game.players.map((p, i) => {return {...p, justDescribed: i === game.descriptionIndex}});\r\n    return (\r\n        <table style={{ 'fontSize': '1.1em', 'width': '100%', 'borderCollapse': 'collapse' }}>\r\n            <thead >\r\n                <tr >\r\n                    <th style={{ 'paddingRight': '30px', 'borderBottom': 'solid 1px grey' }}>Player</th>\r\n                    <th style={{ 'paddingRight': '30px', 'borderBottom': 'solid 1px grey' }}>{isFinal ? '' : 'Guess'}</th>\r\n                    <th style={{ 'textAlign': 'center', 'borderBottom': 'solid 1px grey' }}>Score</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    players.sort((p1, p2) => {return p2.score - p1.score}).map((p, i) => {\r\n                        return (\r\n                            <tr key={i}>\r\n                                <td>{(p.score === Math.max(...(game.players.map(player => player.score))) && (isFinal)) ? '🏆' : ''} {p.name}</td>\r\n                                {\r\n                                    isFinal ? <td></td> : <td>\r\n                                        <span style={{ 'fontWeight': 'bold', 'paddingRight': '2px' }}>\r\n                                            {\r\n                                                (p.guess !== null)\r\n                                                    ?\r\n                                                    ((p.guess.toLowerCase() === game.wordToGuess.toLowerCase())\r\n                                                        ?\r\n                                                        <span style={{ 'color': 'lightgreen' }}>✓ </span>\r\n                                                        :\r\n                                                        <span style={{ 'color': 'tomato' }}>✗ </span>\r\n                                                    )\r\n                                                    :\r\n                                                    ''\r\n                                            }\r\n                                        </span>\r\n                                        {p.justDescribed ? '-' : (p.guess === null ? 'Ran out of time' : p.guess)}\r\n                                    </td>\r\n                                }\r\n\r\n                                <td style={{ 'textAlign': 'center' }}>{p.score}</td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ScoreTable;","\r\nimport ScoreTable from './ScoreTable';\r\n\r\nfunction GuessPost({ game, player, error }) {\r\n\r\n    return (\r\n        <div>\r\n            <p style={{ 'fontSize': '1.5em' }}>\r\n                {game.players[game.descriptionIndex].name} gave the description\r\n                <span style={{ 'fontWeight': 'bold' }}> {game.descriptionToGuess}</span>\r\n                <br /><br />\r\n                They were describing: <br />\r\n                <span style={{ 'fontSize': '2em', 'fontWeight': 'bold' }}>\r\n                    {game.wordToGuess}\r\n                </span>\r\n            </p>\r\n            <ScoreTable game={game}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuessPost;\r\n","import Timer from '../Timer';\r\n\r\nfunction GuessHold({ game, player, error }) {\r\n\r\n    return (\r\n        <div style={{ 'textAlign': 'center' }}>\r\n            <h1 style={{ 'fontSize': '3em', 'marginTop': '20vh' }}>Waiting for others</h1>\r\n            <p>\r\n                Your guess for {game.descriptionToGuess} was {player.guess}\r\n            </p>\r\n\r\n            <div style={{ 'textAlign': 'center', 'marginTop': '5vh' }}>\r\n                <Timer endTime={game.latestTimeoutEnd} startTime={game.latestTimeoutStart}></Timer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GuessHold;\r\n","import GuessPrompt from './GuessPrompt';\r\nimport GuessPost from './GuessPost';\r\nimport GuessHold from './GuessHold';\r\nimport { sanitize } from '../Util';\r\n\r\n\r\nfunction renderSwitch(subState, game, player, error, guess, updateGuess, addGuess) {\r\n    switch(subState) {\r\n        case 'prompt':\r\n            return <GuessPrompt game={game} player={player} addGuess={addGuess} error={error} guess={guess} updateGuess={updateGuess} />\r\n        case 'hold':\r\n            return <GuessHold game={game} player={player} error={error} />\r\n        case 'post':\r\n            return <GuessPost game={game} player={player} error={error} />\r\n        default:\r\n            return <div></div>\r\n    }\r\n}\r\n\r\nfunction Guess({ game, player, error, guess, setGuess, addGuess }) {\r\n    function updateGuess(newValue) {\r\n        setGuess(sanitize(newValue, 16));\r\n    }\r\n    return (\r\n        <div className='centralCol' style={{ 'textAlign': 'left'}}>\r\n            {renderSwitch(game.subState, game, player, error, guess, updateGuess, addGuess)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Guess;\r\n","import { sanitize } from '../Util';\r\nimport ScoreTable from './ScoreTable';\r\n\r\nfunction Final({ game, player, resetGame }) {\r\n    return (\r\n        <div className='centralCol' style={{ 'textAlign': 'left' }}>\r\n            <h1>Final Scores</h1>\r\n            <ScoreTable game={game} isFinal={true} />\r\n            <div style={{ \"marginTop\": \"4vh\" }}>\r\n                {\r\n                    player.isHost\r\n                        ?\r\n                        <input type=\"button\" value=\"Play Again\" onClick={e => resetGame()} />\r\n                        :\r\n                        <p>To play again, ask the host to click \"Play Again\"</p>\r\n                }   \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Final;\r\n","\r\n\r\nfunction Disconnected() {\r\n    return (\r\n        <div className='centralCol'>\r\n            <h2>Disconnected</h2>\r\n            <p>Something went wrong with the game server</p>\r\n            <p>Refreshing the page and trying again might help</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Disconnected;\r\n","import Header from './Header';\r\nimport Home from './Game/Home';\r\nimport Lobby from './Game/Lobby';\r\nimport Describe from './Game/Describe';\r\nimport Guess from './Game/Guess';\r\nimport Final from './Game/Final';\r\nimport Disconnected from './Game/Disconnected';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { sanitize } from './Util';\r\n\r\nconst lobbyResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"lobby\",\r\n    \"subState\": \"null\",\r\n    \"round\": 0,\r\n    \"players\": [\r\n      {\r\n        \"name\": \"Alex\",\r\n        \"isHost\": true\r\n      },\r\n      {\r\n        \"name\": \"Sarah\",\r\n        \"isHost\": false\r\n      },\r\n      {\r\n        \"name\": \"Bob\",\r\n        \"isHost\": false\r\n      }\r\n    ]\r\n  },\r\n  \"player\": {\r\n    \"id\": \"hZD3E2JHFulg8E6 01AmrtTYsS3hP99H\",\r\n    \"name\": \"Bob\",\r\n    \"isHost\": false,\r\n    \"prompt\": null,\r\n    \"description\": null,\r\n    \"guess\": null,\r\n    \"index\": 2\r\n  }\r\n};\r\n\r\nconst lobbyHostResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"lobby\",\r\n    \"subState\": \"null\",\r\n    \"round\": 0,\r\n    \"players\": [\r\n      {\r\n        \"name\": \"Alex\",\r\n        \"isHost\": true\r\n      },\r\n      {\r\n        \"name\": \"Sarah\",\r\n        \"isHost\": false\r\n      },\r\n      {\r\n        \"name\": \"Bob\",\r\n        \"isHost\": false\r\n      }\r\n    ]\r\n  },\r\n  \"player\": {\r\n    \"id\": \"n0t7 D3Qw57V4rwZTvELZnD4F1tZIrU8\",\r\n    \"name\": \"Alex\",\r\n    \"isHost\": true,\r\n    \"prompt\": null,\r\n    \"description\": null,\r\n    \"guess\": null,\r\n    \"index\": 0\r\n  }\r\n};\r\n\r\nconst describePromptResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"describe\",\r\n    \"subState\": \"prompt\",\r\n    \"round\": 1,\r\n    \"latestTimeoutStart\": Date.now(),\r\n    \"latestTimeoutEnd\": (Date.now() + 30000)\r\n  },\r\n  \"player\": {\r\n    \"id\": \"n0t7 D3Qw57V4rwZTvELZnD4F1tZIrU8\",\r\n    \"name\": \"Alex\",\r\n    \"isHost\": true,\r\n    \"prompt\": {\r\n      \"word\": \"TIGER\",\r\n      \"cat\": \"ANIMAL\"\r\n    },\r\n    \"description\": \"claws\",\r\n    \"guess\": null,\r\n    \"index\": 0\r\n  }\r\n}\r\n\r\nconst describeHoldResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"describe\",\r\n    \"subState\": \"hold\",\r\n    \"round\": 1,\r\n    \"latestTimeoutStart\": Date.now(),\r\n    \"latestTimeoutEnd\": (Date.now() + 20000)\r\n  },\r\n  \"player\": {\r\n    \"id\": \"n0t7 D3Qw57V4rwZTvELZnD4F1tZIrU8\",\r\n    \"name\": \"Alex\",\r\n    \"isHost\": true,\r\n    \"prompt\": {\r\n      \"word\": \"TIGER\",\r\n      \"cat\": \"ANIMAL\"\r\n    },\r\n    \"description\": \"claws\",\r\n    \"guess\": null,\r\n    \"index\": 0\r\n  }\r\n}\r\n\r\nconst describePostResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"describe\",\r\n    \"subState\": \"post\",\r\n    \"round\": 1\r\n  },\r\n  \"player\": {\r\n    \"id\": \"n0t7 D3Qw57V4rwZTvELZnD4F1tZIrU8\",\r\n    \"name\": \"Alex\",\r\n    \"isHost\": false,\r\n    \"prompt\": {\r\n      \"word\": \"TIGER\",\r\n      \"cat\": \"ANIMAL\"\r\n    },\r\n    \"description\": \"claws\",\r\n    \"guess\": null,\r\n    \"index\": 1\r\n  }\r\n}\r\n\r\nconst guessPromptOwnResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"guess\",\r\n    \"subState\": \"prompt\",\r\n    \"round\": 1,\r\n    \"descriptionToGuess\": \"claws\",\r\n    \"descriptionIndex\": 0,\r\n    \"catToGuess\": \"ANIMAL\",\r\n    \"latestTimeoutStart\": Date.now(),\r\n    \"latestTimeoutEnd\": (Date.now() + 30000)\r\n  },\r\n  \"player\": {\r\n    \"id\": \" n0t7 D3Qw57V4rwZTvELZnD4F1tZIrU8\",\r\n    \"name\": \"Alex\",\r\n    \"isHost\": true,\r\n    \"prompt\": {\r\n      \"word\": \"TIGER\",\r\n      \"cat\": \"ANIMAL\"\r\n    },\r\n    \"description\": \"claws\",\r\n    \"guess\": \"bird\",\r\n    \"index\": 0\r\n  }\r\n};\r\n\r\nconst guessPromptOtherResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"guess\",\r\n    \"subState\": \"prompt\",\r\n    \"round\": 1,\r\n    \"descriptionToGuess\": \"claws\",\r\n    \"descriptionIndex\": 0,\r\n    \"catToGuess\": \"ANIMAL\",\r\n    \"latestTimeoutStart\": Date.now(),\r\n    \"latestTimeoutEnd\": (Date.now() + 30000)\r\n  },\r\n  \"player\": {\r\n    \"id\": \"6zipJ3gxLuiS3uhlyHkLa30kjxX9h3jE\",\r\n    \"name\": \"Sarah\",\r\n    \"isHost\": false,\r\n    \"prompt\": {\r\n      \"word\": \"PASTA\",\r\n      \"cat\": \"FOOD\"\r\n    },\r\n    \"description\": \"linguini\",\r\n    \"guess\": null,\r\n    \"index\": 1\r\n  }\r\n}\r\n\r\nconst GuessHoldResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"guess\",\r\n    \"subState\": \"hold\",\r\n    \"round\": 1,\r\n    \"descriptionToGuess\": \"claws\",\r\n    \"descriptionIndex\": 0,\r\n    \"catToGuess\": \"ANIMAL\",\r\n    \"latestTimeoutStart\": Date.now(),\r\n    \"latestTimeoutEnd\": (Date.now() + 30000)\r\n  },\r\n  \"player\": {\r\n    \"id\": \"6zipJ3gxLuiS3uhlyHkLa30kjxX9h3jE\",\r\n    \"name\": \"Sarah\",\r\n    \"isHost\": false,\r\n    \"prompt\": {\r\n      \"word\": \"PASTA\",\r\n      \"cat\": \"FOOD\"\r\n    },\r\n    \"description\": \"linguini\",\r\n    \"guess\": \"tiger\",\r\n    \"index\": 1\r\n  }\r\n}\r\n\r\nconst guessPostResponse = {\r\n  \"game\": {\r\n    \"id\": \"4wAAdj\",\r\n    \"state\": \"guess\",\r\n    \"subState\": \"post\",\r\n    \"round\": 1,\r\n    \"descriptionToGuess\": \"claws\",\r\n    \"descriptionIndex\": 0,\r\n    \"catToGuess\": \"ANIMAL\",\r\n    \"wordToGuess\": \"TIGER\",\r\n    \"players\": [\r\n      {\r\n        \"name\": \"Alex\",\r\n        \"guess\": null,\r\n        \"score\": 1\r\n      },\r\n      {\r\n        \"name\": \"Sarah\",\r\n        \"guess\": \"tiger\",\r\n        \"score\": 1\r\n      },\r\n      {\r\n        \"name\": \"Bob\",\r\n        \"guess\": \"like crab\",\r\n        \"score\": 0\r\n      }\r\n    ]\r\n  },\r\n  \"player\": {\r\n    \"id\": \"6zipJ3gxLuiS3uhlyHkLa30kjxX9h3jE\",\r\n    \"name\": \"Sarah\",\r\n    \"isHost\": false,\r\n    \"prompt\": {\r\n      \"word\": \"PASTA\",\r\n      \"cat\": \"FOOD\"\r\n    },\r\n    \"description\": \"linguini\",\r\n    \"guess\": \"tiger\",\r\n    \"index\": 1\r\n  }\r\n};\r\n\r\nconst finalResponse = { \"game\": { \"id\": \"TDNMbu\", \"state\": \"final\", \"subState\": \"null\", \"round\": 3, \"players\": [{ \"name\": \"Bob\", \"guess\": null, \"score\": 1 }, { \"name\": \"Sarah\", \"guess\": null, \"score\": 1 }] }, \"player\": { \"id\": \"mMfTgXWjW27q4NKJ\", \"name\": \"Bob\", \"isHost\": true, \"prompt\": { \"word\": \"PASTA\", \"cat\": \"FOOD\" }, \"description\": \"yej\", \"guess\": null, \"index\": 0 } };\r\n\r\nlet response = null;\r\n// response = lobbyResponse;\r\n// response = lobbyHostResponse;\r\n// response = describePromptResponse;\r\n// response = describeHoldResponse;\r\n// response = describePostResponse;\r\n// response = guessPromptOtherResponse;\r\n// response = guessPromptOwnResponse;\r\n// response = GuessHoldResponse;\r\n// response = guessPostResponse;\r\nresponse = finalResponse;\r\n// const game = (response !== null) ? response.game : null;\r\n// const player = (response !== null) ? response.player : null;\r\n\r\nfunction renderSwitch(\r\n  state, game, player,\r\n  description, setDescription,\r\n  addDescriptionError,\r\n  addDescription,\r\n  guess, setGuess,\r\n  addGuessError,\r\n  addGuess,\r\n  beginGameError,\r\n  beginGame,\r\n  resetGameError,\r\n  resetGame\r\n) {\r\n  switch (state) {\r\n    case 'lobby':\r\n      return <Lobby game={game} player={player} beginGame={beginGame} error={beginGameError} />\r\n    case 'describe':\r\n      return <Describe game={game} player={player} addDescription={addDescription} error={addDescriptionError} description={description} setDescription={setDescription} />\r\n    case 'guess':\r\n      return <Guess game={game} player={player} addGuess={addGuess} error={addGuessError} guess={guess} setGuess={setGuess} />\r\n    case 'final':\r\n      return <Final game={game} player={player} resetGame={resetGame} resetGameError={resetGameError} />\r\n    default:\r\n      return <div></div>\r\n  }\r\n}\r\n\r\nfunction Game() {\r\n  const [description, setDescription] = useState('');\r\n  const [guess, setGuess] = useState('');\r\n  const [joinName, setJoinName] = useState('');\r\n  const [joinCode, setJoinCode] = useState('');\r\n  const [createName, setCreateName] = useState('');\r\n  const [createRounds, setCreateRounds] = useState('3');\r\n  const [createError, setCreateError] = useState('');\r\n  const [joinError, setJoinError] = useState('');\r\n  const [addDescriptionError, setAddDescriptionError] = useState('');\r\n  const [addGuessError, setAddGuessError] = useState('');\r\n  const [game, setGame] = useState(null);\r\n  // const [game, setGame] = useState(response.game);\r\n  const [player, setPlayer] = useState(null);\r\n  // const [player, setPlayer] = useState(response.player);\r\n  const [beginGameError, setBeginGameError] = useState('');\r\n  const [resetGameError, setResetGameError] = useState('');\r\n  const [ws, setWs] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n    const newWs = new WebSocket(\"wss://vast-sierra-80899.herokuapp.com/\");\r\n    setWs(newWs);\r\n    // TODO : parse securley\r\n    newWs.addEventListener(\"message\", e => {\r\n      if (e.data.length > 5000) {\r\n        console.log('Response too large');\r\n        return\r\n      }\r\n\r\n      setIsConnected(true);\r\n\r\n      const response = JSON.parse(e.data);\r\n\r\n      if ('player' in response) {\r\n        const newPlayer = {};\r\n        let isValidPlayer = true;\r\n        let requiredPlayerFields = ['id', 'name', 'isHost', 'index'];\r\n        for (let field of requiredPlayerFields) {\r\n          if (!(field in response.player)) {\r\n            isValidPlayer = false;\r\n          }\r\n        }\r\n        if (isValidPlayer) {\r\n          newPlayer.id = sanitize(response.player.id, 16);\r\n          newPlayer.name = sanitize(response.player.name, 16);\r\n          newPlayer.isHost = response.player.isHost;\r\n          newPlayer.index = parseInt(response.player.index);\r\n          if ('description' in response.player) {\r\n            newPlayer.description = sanitize(response.player.description, 16);\r\n          }\r\n          if ('guess' in response.player) {\r\n            newPlayer.guess = sanitize(response.player.guess, 16);\r\n          }\r\n          if ('prompt' in response.player) {\r\n            if (response.player.prompt === null) {\r\n              newPlayer.prompt = null;\r\n            }\r\n            else if (('word' in response.player.prompt) && ('cat' in response.player.prompt)) {\r\n              newPlayer.prompt = {\r\n                word: sanitize(response.player.prompt.word, 16),\r\n                cat: sanitize(response.player.prompt.cat, 16),\r\n              }\r\n            }\r\n          }\r\n          setPlayer(newPlayer);\r\n        }\r\n      }\r\n\r\n      if ('game' in response) {\r\n        const newGame = {};\r\n        let isValidGame = true;\r\n        let requiredGameFields = ['id', 'state', 'subState', 'round'];\r\n        for (let field of requiredGameFields) {\r\n          if (!(field in response.game)) {\r\n            isValidGame = false;\r\n          }\r\n        }\r\n        if (isValidGame) {\r\n          newGame.id = sanitize(response.game.id, 6);\r\n          newGame.state = sanitize(response.game.state, 16);\r\n          newGame.subState = sanitize(response.game.subState, 16);\r\n          newGame.round = parseInt(response.game.round);\r\n          if ('descriptionToGuess' in response.game) {\r\n            newGame.descriptionToGuess = sanitize(response.game.descriptionToGuess, 16);\r\n          }\r\n          if ('catToGuess' in response.game) {\r\n            newGame.catToGuess = sanitize(response.game.catToGuess, 16);\r\n          }\r\n          if ('wordToGuess' in response.game) {\r\n            newGame.wordToGuess = sanitize(response.game.wordToGuess, 16);\r\n          }\r\n          if ('descriptionIndex' in response.game) {\r\n            newGame.descriptionIndex = parseInt(response.game.descriptionIndex);\r\n          }\r\n          if ('latestTimeoutStart' in response.game) {\r\n            newGame.latestTimeoutStart = parseInt(response.game.latestTimeoutStart);\r\n          }\r\n          if ('latestTimeoutEnd' in response.game) {\r\n            newGame.latestTimeoutEnd = parseInt(response.game.latestTimeoutEnd);\r\n          }\r\n          if (('players' in response.game) && Array.isArray(response.game.players)) {\r\n            newGame.players = [];\r\n            for (let gamePlayer of response.game.players) {\r\n              let newGamePlayer = {}\r\n              if ('name' in gamePlayer) {\r\n                newGamePlayer.name = sanitize(gamePlayer.name, 16);\r\n              }\r\n              if ('guess' in gamePlayer) {\r\n                newGamePlayer.guess = sanitize(gamePlayer.guess, 16);\r\n              }\r\n              if ('score' in gamePlayer) {\r\n                newGamePlayer.score = parseInt(gamePlayer.score);\r\n              }\r\n              if ('isHost' in gamePlayer) {\r\n                newGamePlayer.isHost = gamePlayer.isHost;\r\n              }\r\n              newGame.players.push(newGamePlayer);\r\n            }\r\n          }\r\n          setGame(newGame);\r\n          if ('state' in newGame) {\r\n            if (newGame.state !== 'guess') {\r\n              setGuess('');\r\n            }\r\n            if (newGame.state !== 'describe') {\r\n              setDescription('');\r\n            }\r\n          }\r\n        } else {\r\n          console.log('invalid game');\r\n        }\r\n      }\r\n    });\r\n    newWs.onclose = (e => {\r\n      setIsConnected(false);\r\n    });\r\n  }, []);\r\n\r\n\r\n  function createGame() {\r\n    setCreateError('');\r\n    const name = sanitize(createName, 16);\r\n    if ((!name) || (name !== createName)) {\r\n      setCreateError('Invalid name');\r\n      return\r\n    }\r\n    const requestObject = {\r\n      action: 'newGame',\r\n      playerName: name,\r\n      rounds: parseInt(createRounds)\r\n    }\r\n    if ((ws !== null) && (ws.readyState === ws.OPEN)) {\r\n      ws.send(JSON.stringify(requestObject));\r\n    } else {\r\n      setCreateError('Unable to create game');\r\n    }\r\n  }\r\n\r\n  function beginGame() {\r\n    setBeginGameError('');\r\n    const requestObject = {\r\n      action: 'begin',\r\n      playerId: player.id,\r\n      gameId: game.id,\r\n    }\r\n    if ((ws !== null) && (ws.readyState === ws.OPEN)) {\r\n      ws.send(JSON.stringify(requestObject));\r\n    } else {\r\n      setBeginGameError('Unable to begin game');\r\n    }\r\n  }\r\n\r\n  function resetGame() {\r\n    setResetGameError('');\r\n    const requestObject = {\r\n      action: 'reset',\r\n      playerId: player.id,\r\n      gameId: game.id,\r\n    }\r\n    if ((ws !== null) && (ws.readyState === ws.OPEN)) {\r\n      ws.send(JSON.stringify(requestObject));\r\n    } else {\r\n      setResetGameError('Unable to reset game');\r\n    }\r\n  }\r\n\r\n  function joinGame() {\r\n    setJoinError('');\r\n    const name = sanitize(joinName, 16);\r\n    if ((!name) || (name !== joinName)) {\r\n      setJoinError('Invalid name');\r\n      return\r\n    }\r\n    const code = sanitize(joinCode, 6);\r\n    if ((!code) || (code !== joinCode) || (code.length !== 6)) {\r\n      setJoinError('Invalid code');\r\n      return\r\n    }\r\n    const requestObject = {\r\n      action: 'joinGame',\r\n      playerName: name,\r\n      gameId: code,\r\n    }\r\n    if ((ws !== null) && (ws.readyState === ws.OPEN)) {\r\n      ws.send(JSON.stringify(requestObject));\r\n    } else {\r\n      setJoinError('Unable to join game');\r\n    }\r\n  }\r\n\r\n  function addDescription() {\r\n    setAddDescriptionError('');\r\n    const descriptionToSend = sanitize(description, 16);\r\n    if ((!descriptionToSend) || (descriptionToSend !== description)) {\r\n      setAddDescriptionError('Invalid description');\r\n      return\r\n    }\r\n    const requestObject = {\r\n      action: 'addDescription',\r\n      playerId: player.id,\r\n      gameId: game.id,\r\n      description: descriptionToSend\r\n    }\r\n    if ((ws !== null) && (ws.readyState === ws.OPEN)) {\r\n      ws.send(JSON.stringify(requestObject));\r\n    } else {\r\n      setAddDescriptionError('Unable to send description');\r\n    }\r\n  }\r\n\r\n  function addGuess() {\r\n    setAddGuessError('');\r\n    const guessToSend = sanitize(guess, 16);\r\n    if ((!guessToSend) || (guessToSend !== guess)) {\r\n      setAddGuessError('Invalid guess');\r\n      return\r\n    }\r\n    const requestObject = {\r\n      action: 'addGuess',\r\n      playerId: player.id,\r\n      gameId: game.id,\r\n      guess: guessToSend\r\n    }\r\n\r\n    if ((ws !== null) && (ws.readyState === ws.OPEN)) {\r\n      ws.send(JSON.stringify(requestObject));\r\n    } else {\r\n      setAddGuessError('Unable to send guess');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header text={((game !== null) && (game.round > 0) && (game.state !== 'final')) ? ('Round ' + game.round) : 'Tiptoe Type'} />\r\n      {\r\n        isConnected ? (\r\n          ((typeof (game) !== 'undefined') && (game !== null) && ('state' in game))\r\n            ?\r\n            renderSwitch(\r\n              game.state, game, player,\r\n              description, setDescription,\r\n              addDescriptionError,\r\n              addDescription,\r\n              guess, setGuess,\r\n              addGuessError,\r\n              addGuess,\r\n              beginGameError,\r\n              beginGame,\r\n              resetGameError,\r\n              resetGame\r\n            )\r\n            :\r\n            <Home\r\n              joinName={joinName}\r\n              setJoinName={setJoinName}\r\n              joinCode={joinCode}\r\n              setJoinCode={setJoinCode}\r\n              createName={createName}\r\n              setCreateName={setCreateName}\r\n              createRounds={createRounds}\r\n              setCreateRounds={setCreateRounds}\r\n              joinGame={joinGame}\r\n              createGame={createGame}\r\n              joinError={joinError}\r\n              createError={createError}\r\n            />\r\n        ) : <Disconnected />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;","import './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return <Game/>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}