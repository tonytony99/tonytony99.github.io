{"version":3,"sources":["Duck.js","App.js","reportWebVitals.js","index.js"],"names":["Duck","x","y","angle","speed","transform","cy","cx","fill","rx","ry","r","App","player","useState","setAngle","target","ducks","setDucks","Math","PI","age","label","random","toString","substring","breads","setBreads","isTouching","setIsTouching","throwPower","setThrowPower","tick","setTick","updateTime","newBreads","JSON","parse","stringify","bread","cos","sin","max","filter","newDucks","duck","minDist","dx","dy","dist","push","floor","addDuck","xRatio","abs","sign","useEffect","interval","setInterval","clearInterval","window","addEventListener","event","alpha","getAngle","atan2","className","height","viewBox","width","tabIndex","onKeyDown","key","onTouchStart","onTouchEnd","console","log","style","border","fillOpacity","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c9d105.chunk.js","sourcesContent":["\r\nexport const Duck = ({ x, y, speed, angle }) => {\r\n    return <g transform={`translate (${x} ${y}) rotate(${angle} ${0} ${0})`}>\r\n        <ellipse cy={0} cy={0} rx={15} ry={20} fill=\"grey\" />\r\n        {/* <circle cx={0} cy={0} r={100} stroke=\"green\" fill=\"none\"/> */}\r\n        {/* <circle cx={0} cy={0} r={40} stroke=\"purple\" fill=\"none\"/> */}\r\n        <ellipse cx={0} cy={0 + 24} fill=\"yellow\" rx={7} ry={14} />\r\n        <circle cx={0} cy={0 + 16} fill=\"green\" r=\"14\" />\r\n        <circle cx={0 - 4} cy={0 + 19} fill=\"#222\" r=\"3\" />\r\n        <circle cx={0 + 4} cy={0 + 19} fill=\"#222\" r=\"3\" />\r\n    </g>\r\n}","import './App.css';\nimport { React, useState, useEffect } from 'react';\nimport { Duck } from './Duck';\n\nfunction App() {\n\n  const player = { x: 0, y: 0 };\n\n  const [angle, setAngle] = useState(0);\n  const [ducks, setDucks] = useState([\n    { x: 0, y: -600, target: player, speed: 10 }\n  ]);\n  const [breads, setBreads] = useState([\n    {angle: .2 -Math.PI / 2, speed: 200, r: 0, age: 0, label: Math.random().toString(36).substring(7)}\n  ]);\n  const [isTouching, setIsTouching] = useState(false);\n  const [throwPower, setThrowPower] = useState(0);\n\n  const [tick, setTick] = useState(0);\n\n  const addDuck = (ducks) => {\n    const angle = Math.random() * Math.PI;\n    const newDucks = JSON.parse(JSON.stringify(ducks));\n    newDucks.push({\n      x: 700 * Math.cos(angle),\n      y: 700 * Math.sin(angle),\n      target: player,\n      speed: Math.floor(5 + Math.random() * 5)\n    });\n    return newDucks\n  }\n\n  const updateTime = (ducks, setDucks) => {\n    setTick(tick + 1);\n\n    let newBreads = JSON.parse(JSON.stringify(breads));\n    for (let bread of newBreads) {\n      bread.x = bread.r * Math.cos(bread.angle);\n      bread.y = bread.r * Math.sin(bread.angle);\n      bread.r += bread.speed;\n      bread.speed = Math.max(0, bread.speed * .5 - 1);\n      bread.age += 1;\n    }\n    newBreads = newBreads.filter(bread => bread.age <= 100);\n    setBreads(newBreads);\n\n\n    if (isTouching) {\n      setThrowPower(throwPower + 1);\n    }\n    let newDucks = JSON.parse(JSON.stringify(ducks));\n    for (let duck of newDucks) {\n      let minDist = 100;\n      for (let bread of newBreads) {\n        let dx = duck.x - bread.x;\n        let dy = duck.y - bread.y;\n        let dist = (dx ** 2 + dy ** 2) ** .5;\n        if (dist < minDist) {\n          minDist = dist;\n          duck.target = bread;\n        }\n      }\n    }\n    if ((tick % 4) !== 0) {\n      return\n    }\n    if (!(tick % 20)) {\n      newDucks = addDuck(ducks);\n    }\n    for (let duck of newDucks) {\n      let dx = duck.target.x - duck.x;\n      let dy = duck.target.y - duck.y;\n      let xRatio;\n      if (dx === 0) {\n        xRatio = 0;\n      } else if (dy === 0) {\n        xRatio = 1;\n      } else {\n        xRatio = Math.abs(dx) / (Math.abs(dx) + Math.abs(dy));\n      }\n      duck.x += Math.sign(dx) * duck.speed * xRatio;\n      duck.y += Math.sign(dy) * duck.speed * (1 - xRatio);\n    }\n    setDucks(newDucks);\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateTime(ducks, setDucks);\n    }, 150);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [ducks, tick, updateTime]); // has no dependency - this will be called on-component-mount\n\n\n  useEffect(() => {\n    window.addEventListener('deviceorientation', event => {\n      setAngle(event.alpha);\n      // let transform = document.getElementById('rotate');\n      // transform.setAttribute('transform', `rotate (${event.alpha} 200 700)`);\n    });\n\n    setAngle(0);\n\n  }, []);\n\n  const onKeyDown = event => {\n    if (event.key === 'a') {\n      setAngle(angle + 4);\n    }\n    if (event.key === 'd') {\n      setAngle(angle - 4);\n    }\n  }\n\n  const onMouseDown = event => {\n    setIsTouching(true);\n    setThrowPower(0);\n  }\n\n  const onMouseUp = event => {\n    setIsTouching(false);\n    if (angle === null) {\n      setAngle(0);\n    }\n    console.log('throw', throwPower, angle);\n    const newBreads = JSON.parse(JSON.stringify(breads));\n    newBreads.push(\n      {angle: (270 - angle) * Math.PI / 180, speed: throwPower * 20, r: 0, age: 0, label: Math.random().toString(36).substring(7)}\n    );\n    setBreads(newBreads);\n  }\n\n  const getAngle = (duck) => {\n    let dx = duck.target.x - duck.x;\n    let dy = duck.target.y - duck.y;\n    return (180 / Math.PI) * Math.atan2(dy, dx);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <p>{throwPower}</p> */}\n        <svg height=\"700\" viewBox=\"-150 -700 300 700\" width=\"400\" tabIndex=\"0\" onKeyDown={onKeyDown} onTouchStart={onMouseDown} onTouchEnd={onMouseUp} style={{ border: \"solid 1px green\" }}>\n          <rect x=\"90\" y=\"-690\" height=\"100\" width=\"100\" style={{ fill: \"rgb(255 255 255)\", fillOpacity: 0.2 }} />\n          <g transform={`rotate (${angle} ${140 + player.x * 100 / 1400} ${-640 + player.y * 100 / 1400})`}>\n            {\n              ducks.map((duck, i) => {\n                return <circle key={i} cx={140 + duck.x * 100 / 1400} cy={-640 + duck.y * 100 / 1400}\n                  fill={`rgb(${duck.speed * 40} ${100 - 8 * duck.speed} ${150 - duck.speed * 30})`}\n\n                  r={20 * 100 / 700} />\n              })\n            }\n            <circle cx={140 + player.x * 100 / 1400} cy={-640 + player.y * 100 / 1400} fill=\"green\" r={20 * 100 / 1400} />\n          </g>\n          <g transform={`rotate (${angle} ${player.x} ${player.y})`}>\n            <circle cx={player.x} cy={player.y} r={5} fill=\"green\" />\n            {\n              breads.map((bread, i) => {\n                return <circle key={i} cx={bread.x} cy={bread.y} r=\"5\" fill=\"orange\"/>\n              })\n            }\n            \n            {\n              ducks.map((duck, i) => {\n                return <Duck key={i} x={duck.x} y={duck.y} speed={duck.speed} angle={270 + getAngle(duck) + ((Math.floor(tick / 4) % 2) ? - 5 : 5)}/>\n                // return <circle key={i} cx={duck.x} cy={duck.y}\n                  // fill={`rgb(${duck.speed * 40} ${100 - 8 * duck.speed} ${150 - duck.speed * 30})`}\n                  // r=\"10\" />\n              })\n            }\n          </g>\n        </svg>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}