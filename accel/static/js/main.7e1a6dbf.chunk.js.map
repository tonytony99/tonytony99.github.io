{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","player","x","y","useState","angle","setAngle","ducks","setDucks","tick","setTick","updateTime","newDucks","JSON","parse","stringify","Math","random","PI","push","cos","sin","target","speed","floor","addDuck","duck","dx","dy","xRatio","abs","sign","useEffect","interval","setInterval","clearInterval","window","addEventListener","event","console","log","alpha","className","height","viewBox","width","tabIndex","onKeyDown","key","style","border","fill","fillOpacity","transform","map","i","cx","cy","r","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAoHeA,MAjHf,WAEE,IAAMC,EAAS,CAAEC,EAAG,EAAGC,EAAG,GAE1B,EAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAIA,EAAwBJ,mBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAcMC,EAAa,SAACJ,EAAOC,GACzB,IAAII,EAIFA,EAHIH,EAAO,GAGAI,KAAKC,MAAMD,KAAKE,UAAUR,IAjBzB,SAACA,GACf,IAAMF,EAAQW,KAAKC,SAAWD,KAAKE,GAC7BN,EAAWC,KAAKC,MAAMD,KAAKE,UAAUR,IAO3C,OANAK,EAASO,KAAK,CACZjB,EAAG,IAAMc,KAAKI,IAAIf,GAClBF,EAAG,IAAMa,KAAKK,IAAIhB,GAClBiB,OAAQrB,EACRsB,MAAOP,KAAKQ,MAAM,EAAoB,GAAhBR,KAAKC,YAEtBL,EAMMa,CAAQlB,GAHiB,oBAOrBK,GAPqB,IAOtC,2BAA2B,CAAC,IAAnBc,EAAkB,QACrBC,EAAKD,EAAKJ,OAAOpB,EAAIwB,EAAKxB,EAC1B0B,EAAKF,EAAKJ,OAAOnB,EAAIuB,EAAKvB,EAC1B0B,OAAM,EAERA,EADS,IAAPF,EACO,EACO,IAAPC,EACA,EAEAZ,KAAKc,IAAIH,IAAOX,KAAKc,IAAIH,GAAMX,KAAKc,IAAIF,IAEnDF,EAAKxB,GAAKc,KAAKe,KAAKJ,GAAMD,EAAKH,MAAQM,EACvCH,EAAKvB,GAAKa,KAAKe,KAAKH,GAAMF,EAAKH,OAAS,EAAIM,IAnBR,8BAqBtCrB,EAASI,GACTF,EAAQD,EAAO,IAmCjB,OAhCAuB,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BvB,EAAWJ,EAAOC,KACjB,KAEH,OAAO,WACL2B,cAAcF,MAEf,CAAC1B,EAAOE,IAGXuB,qBAAU,WAERI,OAAOC,iBAAiB,qBAAqB,SAAAC,GAC3CC,QAAQC,IAAIF,EAAMG,OAClBnC,EAASgC,EAAMG,YAMhB,IAYD,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,sBAAKC,OAAO,MAAMC,QAAQ,oBAAoBC,MAAM,MAAMC,SAAS,IAAIC,UAZ3D,SAAAT,GACE,MAAdA,EAAMU,KACR1C,EAASD,EAAQ,GAED,MAAdiC,EAAMU,KACR1C,EAASD,EAAQ,IAO8E4C,MAAO,CAAEC,OAAQ,mBAA9G,UACE,sBAAMhD,EAAE,KAAKC,EAAE,OAAOwC,OAAO,MAAME,MAAM,MAAMI,MAAO,CAAEE,KAAM,mBAAoBC,YAAa,MAC/F,oBAAGC,UAAS,kBAAahD,EAAb,YAAsB,IAAiB,IAAXJ,EAAOC,EAAU,KAA7C,YAAuE,IAAXD,EAAOE,EAAU,KAAvB,IAAtD,KAAZ,UAGII,EAAM+C,KAAI,SAAC5B,EAAM6B,GACf,OAAO,wBAAgBC,GAAI,IAAe,IAAT9B,EAAKxB,EAAU,KAAMuD,GAAoB,IAAT/B,EAAKvB,EAAU,KAArB,IACzDgD,KAAI,cAAsB,GAAbzB,EAAKH,MAAd,YAA4B,IAAM,EAAIG,EAAKH,MAA3C,YAAoD,IAAmB,GAAbG,EAAKH,MAA/D,KAEJmC,EAAG,IAAW,KAHIH,MAMxB,wBAAQC,GAAI,IAAiB,IAAXvD,EAAOC,EAAU,KAAMuD,GAAsB,IAAXxD,EAAOE,EAAU,KAAvB,IAA6BgD,KAAK,QAAQO,EAAG,IAAW,UAExG,oBAAGL,UAAS,kBAAahD,EAAb,YAAsBJ,EAAOC,EAA7B,YAAkCD,EAAOE,EAAzC,KAAZ,UACE,wBAAQqD,GAAIvD,EAAOC,EAAGuD,GAAIxD,EAAOE,EAAGuD,EAAG,EAAGP,KAAK,UAE7C5C,EAAM+C,KAAI,SAAC5B,EAAM6B,GACf,OAAO,wBAAgBC,GAAI9B,EAAKxB,EAAGuD,GAAI/B,EAAKvB,EAC1CgD,KAAI,cAAsB,GAAbzB,EAAKH,MAAd,YAA4B,IAAM,EAAIG,EAAKH,MAA3C,YAAoD,IAAmB,GAAbG,EAAKH,MAA/D,KACJmC,EAAE,MAFgBH,iBC5FrBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e1a6dbf.chunk.js","sourcesContent":["import './App.css';\nimport { React, useState, useEffect } from 'react';\n\nfunction App() {\n\n  const player = { x: 0, y: 0 };\n\n  const [angle, setAngle] = useState(0);\n  const [ducks, setDucks] = useState([\n    // { x: 20, y: 50, target: player, speed: 10 }\n  ])\n\n  const [tick, setTick] = useState(0);\n\n  const addDuck = (ducks) => {\n    const angle = Math.random() * Math.PI;\n    const newDucks = JSON.parse(JSON.stringify(ducks));\n    newDucks.push({\n      x: 700 * Math.cos(angle),\n      y: 700 * Math.sin(angle),\n      target: player,\n      speed: Math.floor(1 + Math.random() * 20)\n    });\n    return newDucks\n  }\n\n  const updateTime = (ducks, setDucks) => {\n    let newDucks;\n    if (!(tick % 20)) {\n      newDucks = addDuck(ducks);\n    } else {\n      newDucks = JSON.parse(JSON.stringify(ducks));\n    }\n    for (let duck of newDucks) {\n      let dx = duck.target.x - duck.x;\n      let dy = duck.target.y - duck.y;\n      let xRatio;\n      if (dx === 0) {\n        xRatio = 0;\n      } else if (dy === 0) {\n        xRatio = 1;\n      } else {\n        xRatio = Math.abs(dx) / (Math.abs(dx) + Math.abs(dy));\n      }\n      duck.x += Math.sign(dx) * duck.speed * xRatio;\n      duck.y += Math.sign(dy) * duck.speed * (1 - xRatio);\n    }\n    setDucks(newDucks);\n    setTick(tick + 1);\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateTime(ducks, setDucks);\n    }, 500);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [ducks, tick]); // has no dependency - this will be called on-component-mount\n\n\n  useEffect(() => {\n\n    window.addEventListener('deviceorientation', event => {\n      console.log(event.alpha);\n      setAngle(event.alpha);\n      // let transform = document.getElementById('rotate');\n      // transform.setAttribute('transform', `rotate (${event.alpha} 200 700)`);\n    });\n\n\n  }, []);\n\n  const onKeyDown = event => {\n    if (event.key === 'a') {\n      setAngle(angle + 5);\n    }\n    if (event.key === 'd') {\n      setAngle(angle - 5);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <svg height=\"700\" viewBox=\"-150 -700 300 700\" width=\"400\" tabIndex=\"0\" onKeyDown={onKeyDown} style={{ border: \"solid 1px green\" }}>\n          <rect x=\"90\" y=\"-690\" height=\"100\" width=\"100\" style={{ fill: \"rgb(255 255 255)\", fillOpacity: 0.2 }} />\n          <g transform={`rotate (${angle} ${140 + player.x * 100 / 1400} ${-640 + player.y * 100 / 1400})`}>\n\n            {\n              ducks.map((duck, i) => {\n                return <circle key={i} cx={140 + duck.x * 100 / 1400} cy={-640 + duck.y * 100 / 1400}\n                  fill={`rgb(${duck.speed * 40} ${100 - 8 * duck.speed} ${150 - duck.speed * 30})`}\n\n                  r={20 * 100 / 700} />\n              })\n            }\n            <circle cx={140 + player.x * 100 / 1400} cy={-640 + player.y * 100 / 1400} fill=\"green\" r={20 * 100 / 1400} />\n          </g>\n          <g transform={`rotate (${angle} ${player.x} ${player.y})`}>\n            <circle cx={player.x} cy={player.y} r={5} fill=\"green\" />\n            {\n              ducks.map((duck, i) => {\n                return <circle key={i} cx={duck.x} cy={duck.y}\n                  fill={`rgb(${duck.speed * 40} ${100 - 8 * duck.speed} ${150 - duck.speed * 30})`}\n                  r=\"10\" />\n              })\n            }\n          </g>\n        </svg>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}