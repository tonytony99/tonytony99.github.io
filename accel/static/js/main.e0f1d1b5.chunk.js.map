{"version":3,"sources":["Duck.js","App.js","reportWebVitals.js","index.js"],"names":["Duck","x","y","angle","speed","console","log","transform","cy","cx","fill","rx","ry","r","App","player","useState","setAngle","target","ducks","setDucks","tick","setTick","updateTime","newDucks","JSON","parse","stringify","Math","random","PI","push","cos","sin","floor","addDuck","duck","dx","dy","xRatio","abs","sign","useEffect","interval","setInterval","clearInterval","window","addEventListener","event","alpha","getAngle","atan2","className","height","viewBox","width","tabIndex","onKeyDown","key","style","border","fillOpacity","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0f1d1b5.chunk.js","sourcesContent":["\r\nexport const Duck = ({ x, y, speed, angle }) => {\r\n    console.log(angle);\r\n    return <g transform={`translate (${x} ${y}) rotate(${angle} ${0} ${0})`}>\r\n        <ellipse cy={0} cy={0} rx={15} ry={20} fill=\"grey\" />\r\n        <ellipse cx={0} cy={0 + 24} fill=\"orange\" rx={7} ry={14} />\r\n        <circle cx={0} cy={0 + 16} fill=\"green\" r=\"14\" />\r\n        <circle cx={0 - 4} cy={0 + 19} fill=\"#222\" r=\"3\" />\r\n        <circle cx={0 + 4} cy={0 + 19} fill=\"#222\" r=\"3\" />\r\n    </g>\r\n}","import './App.css';\nimport { React, useState, useEffect } from 'react';\nimport { Duck } from './Duck';\n\nfunction App() {\n\n  const player = { x: 0, y: 0 };\n\n  const [angle, setAngle] = useState(0);\n  const [ducks, setDucks] = useState([\n    { x: 0, y: -600, target: player, speed: 10 }\n  ])\n\n  const [tick, setTick] = useState(0);\n\n  const addDuck = (ducks) => {\n    const angle = Math.random() * Math.PI;\n    const newDucks = JSON.parse(JSON.stringify(ducks));\n    newDucks.push({\n      x: 700 * Math.cos(angle),\n      y: 700 * Math.sin(angle),\n      target: player,\n      speed: Math.floor(5 + Math.random() * 5)\n    });\n    return newDucks\n  }\n\n  const updateTime = (ducks, setDucks) => {\n    let newDucks;\n    if (!(tick % 20)) {\n      newDucks = addDuck(ducks);\n    } else {\n      newDucks = JSON.parse(JSON.stringify(ducks));\n    }\n    for (let duck of newDucks) {\n      let dx = duck.target.x - duck.x;\n      let dy = duck.target.y - duck.y;\n      let xRatio;\n      if (dx === 0) {\n        xRatio = 0;\n      } else if (dy === 0) {\n        xRatio = 1;\n      } else {\n        xRatio = Math.abs(dx) / (Math.abs(dx) + Math.abs(dy));\n      }\n      duck.x += Math.sign(dx) * duck.speed * xRatio;\n      duck.y += Math.sign(dy) * duck.speed * (1 - xRatio);\n    }\n    setDucks(newDucks);\n    setTick(tick + 1);\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateTime(ducks, setDucks);\n    }, 500);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [ducks, tick]); // has no dependency - this will be called on-component-mount\n\n\n  useEffect(() => {\n\n    window.addEventListener('deviceorientation', event => {\n      console.log(event.alpha);\n      setAngle(event.alpha);\n      // let transform = document.getElementById('rotate');\n      // transform.setAttribute('transform', `rotate (${event.alpha} 200 700)`);\n    });\n\n\n  }, []);\n\n  const onKeyDown = event => {\n    if (event.key === 'a') {\n      setAngle(angle + 5);\n    }\n    if (event.key === 'd') {\n      setAngle(angle - 5);\n    }\n  }\n\n  const getAngle = (duck) => {\n    let dx = duck.target.x - duck.x;\n    let dy = duck.target.y - duck.y;\n    return (180 / Math.PI) * Math.atan2(dy, dx);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <svg height=\"700\" viewBox=\"-150 -700 300 700\" width=\"400\" tabIndex=\"0\" onKeyDown={onKeyDown} style={{ border: \"solid 1px green\" }}>\n          <rect x=\"90\" y=\"-690\" height=\"100\" width=\"100\" style={{ fill: \"rgb(255 255 255)\", fillOpacity: 0.2 }} />\n          <g transform={`rotate (${angle} ${140 + player.x * 100 / 1400} ${-640 + player.y * 100 / 1400})`}>\n\n            {\n              ducks.map((duck, i) => {\n                return <circle key={i} cx={140 + duck.x * 100 / 1400} cy={-640 + duck.y * 100 / 1400}\n                  fill={`rgb(${duck.speed * 40} ${100 - 8 * duck.speed} ${150 - duck.speed * 30})`}\n\n                  r={20 * 100 / 700} />\n              })\n            }\n            <circle cx={140 + player.x * 100 / 1400} cy={-640 + player.y * 100 / 1400} fill=\"green\" r={20 * 100 / 1400} />\n          </g>\n          <g transform={`rotate (${angle} ${player.x} ${player.y})`}>\n            <circle cx={player.x} cy={player.y} r={5} fill=\"green\" />\n            {\n              ducks.map((duck, i) => {\n                return <Duck key={i} x={duck.x} y={duck.y} speed={duck.speed} angle={270 + getAngle(duck) + ((Math.floor(tick / 1) % 2) ? - 5 : 5)}/>\n                // return <circle key={i} cx={duck.x} cy={duck.y}\n                  // fill={`rgb(${duck.speed * 40} ${100 - 8 * duck.speed} ${150 - duck.speed * 30})`}\n                  // r=\"10\" />\n              })\n            }\n          </g>\n        </svg>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}