{"version":3,"sources":["Bread.js","Duck.js","App.js","reportWebVitals.js","index.js"],"names":["Bread","x","y","age","transform","height","width","fill","style","strokeWidth","stroke","rx","opacity","Duck","angle","speed","hasBread","cy","cx","ry","r","App","player","useState","setAngle","deviceAngle","setDeviceAngle","origin","target","hasExited","ducks","setDucks","Math","PI","isTaken","breads","setBreads","isTouching","setIsTouching","throwPower","setThrowPower","tick","setTick","updateTime","newBreads","JSON","parse","stringify","bread","cos","sin","max","newDucks","filter","duck","minDist","dx","dy","dist","random","push","floor","addDuck","xRatio","abs","sign","useEffect","interval","setInterval","clearInterval","window","addEventListener","event","alpha","getAngle","atan2","className","viewBox","tabIndex","onKeyDown","key","onTouchStart","onTouchEnd","console","log","label","toString","substring","border","fillOpacity","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0319632f.chunk.js","sourcesContent":["\r\nexport const Bread = ({ x, y, age}) => {\r\n    return <g transform={`translate (${x} ${y})`}>\r\n        <rect x={-12} y={-15} height={30} width={24} fill=\"white\" style={{strokeWidth: 3, stroke: \"orange\"}} rx={4} opacity={.2 + 10/age} />\r\n    </g>\r\n}","import { Bread } from './Bread';\r\n\r\nexport const Duck = ({ x, y, speed, angle, hasBread }) => {\r\n    return <g transform={`translate (${x} ${y}) rotate(${angle} ${0} ${0})`}>\r\n        {hasBread ? <Bread x={0} y={40} age={0}/> : <g/>}\r\n        \r\n        <ellipse cy={0} cy={0} rx={15} ry={20} fill=\"grey\" />\r\n        {/* <circle cx={0} cy={0} r={100} stroke=\"green\" fill=\"none\"/> */}\r\n        {/* <circle cx={0} cy={0} r={40} stroke=\"purple\" fill=\"none\"/> */}\r\n        <ellipse cx={0} cy={0 + 24} fill=\"yellow\" rx={7} ry={14} />\r\n        <circle cx={0} cy={0 + 16} fill=\"green\" r=\"14\" />\r\n        <circle cx={0 - 4} cy={0 + 19} fill=\"#222\" r=\"3\" />\r\n        <circle cx={0 + 4} cy={0 + 19} fill=\"#222\" r=\"3\" />\r\n\r\n    </g>\r\n}","import './App.css';\nimport { React, useState, useEffect } from 'react';\nimport { Duck } from './Duck';\nimport { Bread } from './Bread';\n\n\n\nfunction App() {\n\n  const player = { x: 0, y: 0 };\n\n  const [angle, setAngle] = useState(0);\n  const [deviceAngle, setDeviceAngle] = useState(0);\n\n  const [ducks, setDucks] = useState([\n    { origin: { x: 0, y: -800 }, x: 0, y: -800, target: player, speed: 50, hasBread: false, hasExited: false }\n  ]);\n  const [breads, setBreads] = useState([\n    { angle: .2 - Math.PI / 2, speed: 200, r: 0, age: 0, isTaken: false }\n  ]);\n  const [isTouching, setIsTouching] = useState(false);\n  const [throwPower, setThrowPower] = useState(0);\n\n  const [tick, setTick] = useState(0);\n\n  const addDuck = (ducks) => {\n    const angle = Math.random() * 2 * Math.PI;\n    const newDucks = JSON.parse(JSON.stringify(ducks));\n    const x = 800 * Math.cos(angle);\n    const y = 800 * Math.sin(angle);\n    newDucks.push({\n      x: x,\n      y: y,\n      origin: { x: x, y: y },\n      target: player,\n      speed: Math.floor(5 + Math.random() * 50)\n    });\n    return newDucks\n  }\n\n  const updateTime = (ducks, setDucks) => {\n    setTick(tick + 1);\n\n    let newBreads = JSON.parse(JSON.stringify(breads));\n    for (let bread of newBreads) {\n      bread.x = bread.r * Math.cos(bread.angle);\n      bread.y = bread.r * Math.sin(bread.angle);\n      bread.r += bread.speed;\n      bread.speed = Math.max(0, bread.speed * .5 - 1);\n      bread.age += 1;\n    }\n\n\n\n    if (isTouching) {\n      setThrowPower(throwPower + 1);\n    }\n    let newDucks = JSON.parse(JSON.stringify(ducks));\n    newDucks = newDucks.filter(duck => (\n      (duck.target.x !== duck.origin.x || duck.target.y !== duck.origin.y || ((duck.x ** 2 + duck.y ** 2) ** .5 <= 700)))\n    );\n\n    for (let duck of newDucks) {\n      let minDist = 100;\n      for (let bread of newBreads) {\n        let dx = duck.x - bread.x;\n        let dy = duck.y - bread.y;\n        let dist = (dx ** 2 + dy ** 2) ** .5;\n        if ((dist < minDist) & (!duck.hasBread)) {\n          minDist = dist;\n          duck.target = bread;\n        }\n        if (dist < 40) {\n          duck.hasBread = true;\n          bread.isTaken = true;\n          duck.target = duck.origin;\n          duck.speed = 50;\n        }\n      }\n    }\n    newBreads = newBreads.filter(bread => (bread.age <= 100 && !bread.isTaken));\n    setBreads(newBreads);\n    setDucks(newDucks);\n    setAngle(deviceAngle);\n    if ((tick % 4) !== 0) {\n      return\n    }\n    if (!(tick % 100)) {\n      newDucks = addDuck(ducks);\n    }\n    for (let duck of newDucks) {\n      let dx = duck.target.x - duck.x;\n      let dy = duck.target.y - duck.y;\n      let xRatio;\n      if (dx === 0) {\n        xRatio = 0;\n      } else if (dy === 0) {\n        xRatio = 1;\n      } else {\n        xRatio = Math.abs(dx) / (Math.abs(dx) + Math.abs(dy));\n      }\n      duck.x += Math.sign(dx) * duck.speed * xRatio;\n      duck.y += Math.sign(dy) * duck.speed * (1 - xRatio);\n    }\n    setDucks(newDucks);\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateTime(ducks, setDucks);\n    }, 100);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [ducks, tick, updateTime]); // has no dependency - this will be called on-component-mount\n\n\n  useEffect(() => {\n    window.addEventListener('deviceorientation', event => {\n      setDeviceAngle(event.alpha);\n      // let transform = document.getElementById('rotate');\n      // transform.setAttribute('transform', `rotate (${event.alpha} 200 700)`);\n    });\n\n    setDeviceAngle(0);\n\n  }, []);\n\n  const onKeyDown = event => {\n    if (event.key === 'a') {\n      setAngle(angle + 4);\n    }\n    if (event.key === 'd') {\n      setAngle(angle - 4);\n    }\n  }\n\n  const onMouseDown = event => {\n    setIsTouching(true);\n    setThrowPower(0);\n  }\n\n  const onMouseUp = event => {\n    setIsTouching(false);\n    if (angle === null) {\n      setAngle(0);\n    }\n    if (throwPower < 1) {\n      return\n    }\n    console.log('throw', throwPower, angle);\n    const newBreads = JSON.parse(JSON.stringify(breads));\n    newBreads.push(\n      { x: player.x, y: player.y, angle: (270 - angle) * Math.PI / 180, speed: throwPower * 50, r: 0, age: 0, label: Math.random().toString(36).substring(7) }\n    );\n    setBreads(newBreads);\n  }\n\n  const getAngle = (duck) => {\n    let dx = duck.target.x - duck.x;\n    let dy = duck.target.y - duck.y;\n    return (180 / Math.PI) * Math.atan2(dy, dx);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <p>{throwPower}</p> */}\n        <svg height=\"700\" viewBox=\"-150 -700 300 700\" width=\"400\" tabIndex=\"0\" onKeyDown={onKeyDown} onTouchStart={onMouseDown} onTouchEnd={onMouseUp} style={{ border: \"solid 1px green\" }}>\n          <rect x=\"90\" y=\"-690\" height=\"100\" width=\"100\" style={{ fill: \"rgb(255 255 255)\", fillOpacity: 0.2 }} />\n          <g transform={`rotate (${angle} ${140 + player.x * 100 / 1400} ${-640 + player.y * 100 / 1400})`}>\n            {\n              ducks.map((duck, i) => {\n                return <circle key={i} cx={140 + duck.x * 100 / 1400} cy={-640 + duck.y * 100 / 1400}\n                  fill={`rgb(${duck.speed * 40} ${100 - 8 * duck.speed} ${150 - duck.speed * 30})`}\n\n                  r={20 * 100 / 700} />\n              })\n            }\n            <circle cx={140 + player.x * 100 / 1400} cy={-640 + player.y * 100 / 1400} fill=\"green\" r={20 * 100 / 1400} />\n          </g>\n          <g transform={`rotate (${angle} ${player.x} ${player.y})`}>\n            <circle cx={player.x} cy={player.y} r={5} fill=\"green\" />\n            {\n              breads.map((bread, i) => {\n                // return <circle key={i} cx={bread.x} cy={bread.y} r=\"5\" fill=\"orange\"/>\n                return <Bread key={i} x={bread.x} y={bread.y} age={bread.age} />\n              })\n            }\n\n            {\n              ducks.map((duck, i) => {\n                return <Duck key={i} x={duck.x} y={duck.y} speed={duck.speed} hasBread={duck.hasBread} angle={270 + getAngle(duck) + ((Math.floor(tick / 4) % 2) ? - 5 : 5)} />\n                // return <circle key={i} cx={duck.x} cy={duck.y}\n                // fill={`rgb(${duck.speed * 40} ${100 - 8 * duck.speed} ${150 - duck.speed * 30})`}\n                // r=\"10\" />\n              })\n            }\n          </g>\n        </svg>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}